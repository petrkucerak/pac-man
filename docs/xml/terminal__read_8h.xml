<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="terminal__read_8h" kind="file" language="C++">
    <compoundname>terminal_read.h</compoundname>
    <includedby refid="apoman_8c" local="yes">C:/Users/Petr/Documents/apo_semestralka/apoman.c</includedby>
    <includedby refid="terminal__read_8c" local="yes">C:/Users/Petr/Documents/apo_semestralka/terminal_read.c</includedby>
    <invincdepgraph>
      <node id="3">
        <label>C:/Users/Petr/Documents/apo_semestralka/terminal_read.c</label>
        <link refid="terminal__read_8c"/>
      </node>
      <node id="1">
        <label>C:/Users/Petr/Documents/apo_semestralka/terminal_read.h</label>
        <link refid="terminal__read_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>C:/Users/Petr/Documents/apo_semestralka/apoman.c</label>
        <link refid="apoman_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="terminal__read_8h_1a6e5f9cf7005e2874fa80bac20e2452b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* input_thread</definition>
        <argsstring>(void *)</argsstring>
        <name>input_thread</name>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>void* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/terminal_read.h" line="19" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/terminal_read.c" bodystart="22" bodyend="60" declfile="C:/Users/Petr/Documents/apo_semestralka/terminal_read.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="terminal__read_8h_1a4d4ef2b89a0190b7e5ebb1edf4d1cee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int serial_getc_timeout</definition>
        <argsstring>(int fd, int timeout_ms, unsigned char *c)</argsstring>
        <name>serial_getc_timeout</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_ms</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/terminal_read.h" line="29" column="5" bodyfile="C:/Users/Petr/Documents/apo_semestralka/terminal_read.c" bodystart="63" bodyend="75" declfile="C:/Users/Petr/Documents/apo_semestralka/terminal_read.h" declline="29" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Module housing the thread function for reading the terminal in nonblocking mode and setting the last key pressed variable. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Lukas Nejezchleb (<ulink url="mailto:nejezluk@fel.cvut.cz">nejezluk@fel.cvut.cz</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2021-05-04</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2021 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TERMINAL_READ_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TERMINAL_READ_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="terminal__read_8h_1a6e5f9cf7005e2874fa80bac20e2452b6" kindref="member">input_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="terminal__read_8h_1a4d4ef2b89a0190b7e5ebb1edf4d1cee3" kindref="member">serial_getc_timeout</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout_ms,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialisation<sp/>of<sp/>the<sp/>thread:</highlight></codeline>
<codeline lineno="34"><highlight class="comment">initialising<sp/>mutex</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_mutex_t<sp/>mtx;</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">inside<sp/>main<sp/>function<sp/>calling</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_mutex_init(&amp;mtx,<sp/>NULL);<sp/>//<sp/>initialize<sp/>mutex<sp/>with<sp/>default<sp/>attributes</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>read_thread_data_type<sp/>read_thread_data<sp/>=<sp/>{.quit<sp/>=<sp/>false,<sp/>.last_read<sp/>=<sp/>&apos;<sp/>&apos;};</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_t<sp/>read_thread;</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_create(read_thread,<sp/>NULL,<sp/>input_thread,<sp/>&amp;read_thread_data);</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment">to<sp/>acces<sp/>read_data<sp/>from<sp/>terminal</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;mtx);</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>variable_to_load_into<sp/>=<sp/>read_thread_data.last_read;</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;mtx);</highlight></codeline>
<codeline lineno="49"><highlight class="comment">here<sp/>the<sp/>data<sp/>from<sp/>variable_to_load_into<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment">to<sp/>terminate<sp/>thread:</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;mtx);</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>read_thread_data.quit<sp/>=<sp/>true;<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;mtx);</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_join(read_thread,<sp/>NULL);<sp/>//wait<sp/>for<sp/>thread<sp/>to<sp/>join</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_mutex_destroy(&amp;mtx);</highlight></codeline>
<codeline lineno="57"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Petr/Documents/apo_semestralka/terminal_read.h"/>
  </compounddef>
</doxygen>
