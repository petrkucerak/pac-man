<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ghost_8c" kind="file" language="C++">
    <compoundname>ghost.c</compoundname>
    <includes refid="ghost_8h" local="yes">ghost.h</includes>
    <includes refid="data__structures_8h" local="yes">data_structures.h</includes>
    <includes refid="draw__shapes_8h" local="yes">draw_shapes.h</includes>
    <includes refid="map__from__template_8h" local="yes">map_from_template.h</includes>
    <includes refid="config_8h" local="yes">config.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>map_template.h</label>
        <link refid="map__template_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="8">
        <label>draw_shapes.h</label>
        <link refid="draw__shapes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ghost.c</label>
        <link refid="ghost_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ghost.h</label>
        <link refid="ghost_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pthread.h</label>
      </node>
      <node id="9">
        <label>map_from_template.h</label>
        <link refid="map__from__template_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>data_structures.h</label>
        <link refid="data__structures_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ghost_8c_1ae10703308badbc547da248d1dddcd699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ghost_move</definition>
        <argsstring>(ghost_type *ghost, map_data *map, pacman_type *pacman)</argsstring>
        <name>ghost_move</name>
        <param>
          <type><ref refid="structghost__type" kindref="compound">ghost_type</ref> *</type>
          <declname>ghost</declname>
        </param>
        <param>
          <type><ref refid="structmap__data" kindref="compound">map_data</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="structpacman__type" kindref="compound">pacman_type</ref> *</type>
          <declname>pacman</declname>
        </param>
        <briefdescription>
<para>Has small chance to change the ghost movement from random to targeting and vice versa. Changes the ghosts direction if there are more possibilities, moves the ghost in the resulting direction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pacman</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/ghost.c" line="20" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/ghost.c" bodystart="20" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="ghost_8c_1a25d891c687c3f7006638701ab4856d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ghost_can_move</definition>
        <argsstring>(ghost_type *ghost, int dirx, int diry, map_data *map)</argsstring>
        <name>ghost_can_move</name>
        <param>
          <type><ref refid="structghost__type" kindref="compound">ghost_type</ref> *</type>
          <declname>ghost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dirx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>diry</declname>
        </param>
        <param>
          <type><ref refid="structmap__data" kindref="compound">map_data</ref> *</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Returns true if ghost can move in given direction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diry</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/ghost.c" line="68" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/ghost.c" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="ghost_8c_1aea3ea3ec6383019544b3e889015fc6d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_moves</definition>
        <argsstring>(moves_costs_t *moves_arr, ghost_type *ghost, map_data *map, pacman_type *pacman)</argsstring>
        <name>create_moves</name>
        <param>
          <type><ref refid="structmoves__costs__t" kindref="compound">moves_costs_t</ref> *</type>
          <declname>moves_arr</declname>
        </param>
        <param>
          <type><ref refid="structghost__type" kindref="compound">ghost_type</ref> *</type>
          <declname>ghost</declname>
        </param>
        <param>
          <type><ref refid="structmap__data" kindref="compound">map_data</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type><ref refid="structpacman__type" kindref="compound">pacman_type</ref> *</type>
          <declname>pacman</declname>
        </param>
        <briefdescription>
<para>Returns number of possible moves, which it has put into the array along with their cost. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>moves_arr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pacman</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>returns number of possible moves, which it has put into the array along with their cost </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/ghost.c" line="74" column="5" bodyfile="C:/Users/Petr/Documents/apo_semestralka/ghost.c" bodystart="74" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="ghost_8c_1a5a6a4ea7a54730dd11640485ca265353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_ghost</definition>
        <argsstring>(fb_data *fb, ghost_type *ghost, map_data *map)</argsstring>
        <name>draw_ghost</name>
        <param>
          <type><ref refid="structfb__data" kindref="compound">fb_data</ref> *</type>
          <declname>fb</declname>
        </param>
        <param>
          <type><ref refid="structghost__type" kindref="compound">ghost_type</ref> *</type>
          <declname>ghost</declname>
        </param>
        <param>
          <type><ref refid="structmap__data" kindref="compound">map_data</ref> *</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Draws the ghost to frame buffer with color indicating its state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fb</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/ghost.c" line="99" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/ghost.c" bodystart="99" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="ghost_8c_1a14b4ae2c797e212ae5255036c699676a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structghost__type" kindref="compound">ghost_type</ref></type>
        <definition>ghost_type create_ghost</definition>
        <argsstring>(map_data *map, int ghost_nr)</argsstring>
        <name>create_ghost</name>
        <param>
          <type><ref refid="structmap__data" kindref="compound">map_data</ref> *</type>
          <declname>map</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ghost_nr</declname>
        </param>
        <briefdescription>
<para>Creates the ghost at spawning point at map. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ghost_nr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structghost__type" kindref="compound">ghost_type</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/ghost.c" line="111" column="12" bodyfile="C:/Users/Petr/Documents/apo_semestralka/ghost.c" bodystart="111" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="ghost_8c_1a5384f018ac62b15c7f5e61d662a0e51c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void change_direction</definition>
        <argsstring>(ghost_type *ghost, int possibilities, moves_costs_t *moves_options)</argsstring>
        <name>change_direction</name>
        <param>
          <type><ref refid="structghost__type" kindref="compound">ghost_type</ref> *</type>
          <declname>ghost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>possibilities</declname>
        </param>
        <param>
          <type><ref refid="structmoves__costs__t" kindref="compound">moves_costs_t</ref> *</type>
          <declname>moves_options</declname>
        </param>
        <briefdescription>
<para>Changes the direction of ghost to the path that would lead the closest to pacman or random if ghost is moving randomly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ghost</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>possibilities</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moves_options</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/ghost.c" line="124" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/ghost.c" bodystart="124" bodyend="156"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Module where all the logic and movement of ghost is placed. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Lukas Nejezchleb (<ulink url="mailto:nejezluk@fel.cvut.cz">nejezluk@fel.cvut.cz</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2021-05-04</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2021 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ghost_8h" kindref="compound">ghost.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__structures_8h" kindref="compound">data_structures.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="draw__shapes_8h" kindref="compound">draw_shapes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="map__from__template_8h" kindref="compound">map_from_template.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_8h" kindref="compound">config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ghost_8c_1ae10703308badbc547da248d1dddcd699" kindref="member">ghost_move</ref>(<ref refid="structghost__type" kindref="compound">ghost_type</ref><sp/>*ghost,<sp/><ref refid="structmap__data" kindref="compound">map_data</ref><sp/>*map,<sp/><ref refid="structpacman__type" kindref="compound">pacman_type</ref><sp/>*pacman)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pacman-&gt;<ref refid="structpacman__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>==<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)<sp/>&amp;&amp;<sp/>(pacman-&gt;<ref refid="structpacman__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>==<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref>))</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ghost-&gt;<ref refid="structghost__type_1a9baade4c57be1fd2d7ad88f233bb5e7d" kindref="member">scared</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref><sp/>=<sp/>map-&gt;<ref refid="structmap__data_1a231a72e20c10785d4a461a464a58f970" kindref="member">ghost_spawn</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a9baade4c57be1fd2d7ad88f233bb5e7d" kindref="member">scared</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pacman-&gt;<ref refid="structpacman__type_1aef160b7437d94056f1dc59646cd5b87d" kindref="member">score</ref><sp/>+=<sp/><ref refid="config_8h_1ae812134d65aa84762a15f5d570014daa" kindref="member">GHOST_SCORE_INCECREASE</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ghost-&gt;<ref refid="structghost__type_1a9baade4c57be1fd2d7ad88f233bb5e7d" kindref="member">scared</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rand()<sp/>%<sp/><ref refid="config_8h_1ab1cc753b0e4445ab194c1d2b7f693054" kindref="member">GHOST_SWITCH_TO_RANDOM</ref><sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(ghost-&gt;<ref refid="structghost__type_1a4b700a8d1d6df04cafe936a0855ff004" kindref="member">moving_randomly</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a4b700a8d1d6df04cafe936a0855ff004" kindref="member">moving_randomly</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rand()<sp/>%<sp/><ref refid="config_8h_1aa7e67f5126c304dba2e7d85d1baea902" kindref="member">GHOST_SWITCH_TO_TARGET</ref><sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(ghost-&gt;<ref refid="structghost__type_1a4b700a8d1d6df04cafe936a0855ff004" kindref="member">moving_randomly</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a4b700a8d1d6df04cafe936a0855ff004" kindref="member">moving_randomly</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmoves__costs__t" kindref="compound">moves_costs_t</ref><sp/>possible_moves[4];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>possibilities<sp/>=<sp/><ref refid="ghost_8c_1aea3ea3ec6383019544b3e889015fc6d0" kindref="member">create_moves</ref>(possible_moves,<sp/>ghost,<sp/>map,<sp/>pacman);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ghost_8c_1a5384f018ac62b15c7f5e61d662a0e51c" kindref="member">change_direction</ref>(ghost,<sp/>possibilities,<sp/>possible_moves);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>+<sp/>ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>=<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>+<sp/>ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pacman-&gt;<ref refid="structpacman__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>==<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)<sp/>&amp;&amp;<sp/>(pacman-&gt;<ref refid="structpacman__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>==<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref>))</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ghost-&gt;<ref refid="structghost__type_1a9baade4c57be1fd2d7ad88f233bb5e7d" kindref="member">scared</ref>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref><sp/>=<sp/>map-&gt;<ref refid="structmap__data_1a231a72e20c10785d4a461a464a58f970" kindref="member">ghost_spawn</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a9baade4c57be1fd2d7ad88f233bb5e7d" kindref="member">scared</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pacman-&gt;<ref refid="structpacman__type_1aef160b7437d94056f1dc59646cd5b87d" kindref="member">score</ref><sp/>+=<sp/><ref refid="config_8h_1ae812134d65aa84762a15f5d570014daa" kindref="member">GHOST_SCORE_INCECREASE</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ghost_8c_1a25d891c687c3f7006638701ab4856d35" kindref="member">ghost_can_move</ref>(<ref refid="structghost__type" kindref="compound">ghost_type</ref><sp/>*ghost,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diry,<sp/><ref refid="structmap__data" kindref="compound">map_data</ref><sp/>*map)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixel<sp/>=<sp/>map-&gt;<ref refid="structmap__data_1a9818b17c7d2a7b36901aa275b76c39d0" kindref="member">board_arr</ref>[map-&gt;<ref refid="structmap__data_1a2474a5474cbff19523a51eb1de01cda4" kindref="member">width</ref><sp/>*<sp/>(ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>+<sp/>diry)<sp/>+<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>+<sp/>dirx];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(pixel<sp/>!=<sp/><ref refid="data__structures_8h_1a48f6457243719e7031768d4100741159" kindref="member">BLOCKED</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ghost_8c_1aea3ea3ec6383019544b3e889015fc6d0" kindref="member">create_moves</ref>(<ref refid="structmoves__costs__t" kindref="compound">moves_costs_t</ref><sp/>*moves_arr,<sp/><ref refid="structghost__type" kindref="compound">ghost_type</ref><sp/>*ghost,<sp/><ref refid="structmap__data" kindref="compound">map_data</ref><sp/>*map,<sp/><ref refid="structpacman__type" kindref="compound">pacman_type</ref><sp/>*pacman)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>4<sp/>on<sp/>next<sp/>lines<sp/>is<sp/>ammount<sp/>of<sp/>directions<sp/>and<sp/>should<sp/>not<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcoords" kindref="compound">coords</ref><sp/>dirs[4]<sp/>=<sp/>{{.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>0,<sp/>.y<sp/>=<sp/>-1},<sp/>{.x<sp/>=<sp/>0,<sp/>.y<sp/>=<sp/>1},<sp/>{.x<sp/>=<sp/>1,<sp/>.y<sp/>=<sp/>0},<sp/>{.x<sp/>=<sp/>-1,<sp/>.y<sp/>=<sp/>0}};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ghost_8c_1a25d891c687c3f7006638701ab4856d35" kindref="member">ghost_can_move</ref>(ghost,<sp/>dirs[i].x,<sp/>dirs[i].y,<sp/>map))</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dirs[i].x<sp/>!=<sp/>-ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)<sp/>||<sp/>(dirs[i].y<sp/>!=<sp/>-ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref>))</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moves_arr[ret].<ref refid="structmoves__costs__t_1a6f3eaf7f9f7ef92ed9e838cf68763444" kindref="member">dir</ref><sp/>=<sp/>dirs[i];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cost<sp/>=<sp/>(pacman-&gt;<ref refid="structpacman__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>-<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>-<sp/>dirs[i].<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)<sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pacman-&gt;<ref refid="structpacman__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>-<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>-<sp/>dirs[i].x)<sp/>+</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pacman-&gt;<ref refid="structpacman__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>-<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>-<sp/>dirs[i].<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref>)<sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pacman-&gt;<ref refid="structpacman__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>-<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref><sp/>-<sp/>dirs[i].y);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moves_arr[ret].<ref refid="structmoves__costs__t_1a66700f11d42fee2413e58dbf49c43ee1" kindref="member">cost</ref><sp/>=<sp/>cost;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret++;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;<sp/></highlight><highlight class="comment">//<sp/>return<sp/>ammount<sp/>of<sp/>valid<sp/>options<sp/>to<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ghost_8c_1a5a6a4ea7a54730dd11640485ca265353" kindref="member">draw_ghost</ref>(<ref refid="structfb__data" kindref="compound">fb_data</ref><sp/>*fb,<sp/><ref refid="structghost__type" kindref="compound">ghost_type</ref><sp/>*ghost,<sp/><ref refid="structmap__data" kindref="compound">map_data</ref><sp/>*map)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ghost-&gt;<ref refid="structghost__type_1a9baade4c57be1fd2d7ad88f233bb5e7d" kindref="member">scared</ref>)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="draw__shapes_8c_1a93686d02b452d0aa3a5b050bf1f92c82" kindref="member">draw_ghost_shape</ref>(fb,<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>,<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref>,<sp/>map-&gt;<ref refid="structmap__data_1aa357cd36ef175f727e27f1da960dddaf" kindref="member">max_object_diameter</ref><sp/>/<sp/>8,<sp/>0x1f);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="draw__shapes_8c_1a93686d02b452d0aa3a5b050bf1f92c82" kindref="member">draw_ghost_shape</ref>(fb,<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>,<sp/>ghost-&gt;<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref>,<sp/>map-&gt;<ref refid="structmap__data_1aa357cd36ef175f727e27f1da960dddaf" kindref="member">max_object_diameter</ref><sp/>/<sp/>8,<sp/>ghost-&gt;<ref refid="structghost__type_1a0b10c5b0fa8e65e009263b93ba2671ae" kindref="member">color</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="structghost__type" kindref="compound">ghost_type</ref><sp/><ref refid="ghost_8c_1a14b4ae2c797e212ae5255036c699676a" kindref="member">create_ghost</ref>(<ref refid="structmap__data" kindref="compound">map_data</ref><sp/>*map,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghost_nr)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structghost__type" kindref="compound">ghost_type</ref><sp/>ghost;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>ghost.<ref refid="structghost__type_1a4b700a8d1d6df04cafe936a0855ff004" kindref="member">moving_randomly</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>ghost.<ref refid="structghost__type_1a9baade4c57be1fd2d7ad88f233bb5e7d" kindref="member">scared</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>ghost.<ref refid="structghost__type_1a7db8b62e64ae0eb828ef80d8708d7243" kindref="member">location</ref><sp/>=<sp/>map-&gt;<ref refid="structmap__data_1a231a72e20c10785d4a461a464a58f970" kindref="member">ghost_spawn</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcoords" kindref="compound">coords</ref><sp/>direction<sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>ghost.<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref><sp/>=<sp/>direction;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>color_pallete[]<sp/>=<sp/>{<ref refid="config_8h_1a023956375f6b5b17c1dffbf9c672f31f" kindref="member">GHOST_COLORS</ref>};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>ghost.<ref refid="structghost__type_1a0b10c5b0fa8e65e009263b93ba2671ae" kindref="member">color</ref><sp/>=<sp/>color_pallete[ghost_nr<sp/>%<sp/>(<ref refid="config_8h_1ac447386d85ded6e889579c2c08ff1adf" kindref="member">GHOST_COLORS_AMMOUNT</ref>)];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ghost;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ghost_8c_1a5384f018ac62b15c7f5e61d662a0e51c" kindref="member">change_direction</ref>(<ref refid="structghost__type" kindref="compound">ghost_type</ref><sp/>*ghost,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>possibilities,<sp/><ref refid="structmoves__costs__t" kindref="compound">moves_costs_t</ref><sp/>*moves_options)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(possibilities<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>host<sp/>reached<sp/>dead_end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>-ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref>.<ref refid="structcoords_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>-ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref>.<ref refid="structcoords_1a0a2f84ed7838f07779ae24c5a9086d33" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(possibilities<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>way<sp/>possible,<sp/>pick<sp/>that<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref><sp/>=<sp/>moves_options[0].<ref refid="structmoves__costs__t_1a6f3eaf7f9f7ef92ed9e838cf68763444" kindref="member">dir</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ghost-&gt;<ref refid="structghost__type_1a4b700a8d1d6df04cafe936a0855ff004" kindref="member">moving_randomly</ref>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref><sp/>=<sp/>moves_options[rand()<sp/>%<sp/>possibilities].<ref refid="structmoves__costs__t_1a6f3eaf7f9f7ef92ed9e838cf68763444" kindref="member">dir</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pick<sp/>direction<sp/>with<sp/>smallest<sp/>cost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowest_cost<sp/>=<sp/>moves_options[0].<ref refid="structmoves__costs__t_1a66700f11d42fee2413e58dbf49c43ee1" kindref="member">cost</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowest_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>possibilities;<sp/>++i)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lowest_cost<sp/>&gt;<sp/>moves_options[i].cost)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest_cost<sp/>=<sp/>moves_options[i].<ref refid="structmoves__costs__t_1a66700f11d42fee2413e58dbf49c43ee1" kindref="member">cost</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest_index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost-&gt;<ref refid="structghost__type_1a1020ed5ecf8ec6fb9721615347ecd8a0" kindref="member">direction</ref><sp/>=<sp/>moves_options[lowest_index].<ref refid="structmoves__costs__t_1a6f3eaf7f9f7ef92ed9e838cf68763444" kindref="member">dir</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Petr/Documents/apo_semestralka/ghost.c"/>
  </compounddef>
</doxygen>
