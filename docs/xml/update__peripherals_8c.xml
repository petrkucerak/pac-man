<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="update__peripherals_8c" kind="file" language="C++">
    <compoundname>update_peripherals.c</compoundname>
    <includes refid="update__peripherals_8h" local="yes">update_peripherals.h</includes>
    <includes refid="mzapo__parlcd_8h" local="yes">mzapo_parlcd.h</includes>
    <includes refid="mzapo__regs_8h" local="yes">mzapo_regs.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdbool.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>map_template.h</label>
        <link refid="map__template_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c</label>
        <link refid="update__peripherals_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>update_peripherals.h</label>
        <link refid="update__peripherals_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pthread.h</label>
      </node>
      <node id="8">
        <label>mzapo_parlcd.h</label>
        <link refid="mzapo__parlcd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>mzapo_regs.h</label>
        <link refid="mzapo__regs_8h"/>
      </node>
      <node id="4">
        <label>data_structures.h</label>
        <link refid="data__structures_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="update__peripherals_8c_1aa30de0dfddc51283d5b5e429fdb6f030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lcd_from_fb</definition>
        <argsstring>(const fb_data *frame_buff, unsigned char *parlcd_mem_base)</argsstring>
        <name>lcd_from_fb</name>
        <param>
          <type>const <ref refid="structfb__data" kindref="compound">fb_data</ref> *</type>
          <declname>frame_buff</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>parlcd_mem_base</declname>
        </param>
        <briefdescription>
<para>Sets the lcd pixels to colors described in frame buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame_buff</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parlcd_mem_base</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" line="18" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" bodystart="18" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="update__peripherals_8c_1a27f1db817fb1375b46affe1dc4d0dc9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void led_strip_number</definition>
        <argsstring>(unsigned char *led_mem_base, int max_nr, int nr)</argsstring>
        <name>led_strip_number</name>
        <param>
          <type>unsigned char *</type>
          <declname>led_mem_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_nr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nr</declname>
        </param>
        <briefdescription>
<para>Shows number as number of clusters on the led strip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led_mem_base</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_nr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" line="31" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" bodystart="31" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="update__peripherals_8c_1af830207334d68a6414d80117e98e7a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_left_RGB</definition>
        <argsstring>(unsigned char *led_mem_base, uint8_t r, uint8_t g, uint8_t b)</argsstring>
        <name>set_left_RGB</name>
        <param>
          <type>unsigned char *</type>
          <declname>led_mem_base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>g</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Sets the left RGB led to particular rgb color. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led_mem_base</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" line="69" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" bodystart="69" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="update__peripherals_8c_1a55ba16e218e56e6112bea4cb48dd7017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_right_RGB</definition>
        <argsstring>(unsigned char *led_mem_base, uint8_t r, uint8_t g, uint8_t b)</argsstring>
        <name>set_right_RGB</name>
        <param>
          <type>unsigned char *</type>
          <declname>led_mem_base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>g</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Sets the right RGB led to particular rgb color. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led_mem_base</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" line="79" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" bodystart="79" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="update__peripherals_8c_1afdba9f1f14e9a81789f87d33a36bda35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sel_leds_color</definition>
        <argsstring>(unsigned char *led_mem_base, uint32_t color)</argsstring>
        <name>sel_leds_color</name>
        <param>
          <type>unsigned char *</type>
          <declname>led_mem_base</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Sets both to color. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led_mem_base</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" line="89" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c" bodystart="89" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Module for setting the peripherals. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Lukas Nejezchleb (<ulink url="mailto:nejezluk@fel.cvut.cz">nejezluk@fel.cvut.cz</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2021-05-04</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2021 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="update__peripherals_8h" kindref="compound">update_peripherals.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mzapo__parlcd_8h" kindref="compound">mzapo_parlcd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mzapo__regs_8h" kindref="compound">mzapo_regs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="update__peripherals_8c_1aa30de0dfddc51283d5b5e429fdb6f030" kindref="member">lcd_from_fb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfb__data" kindref="compound">fb_data</ref><sp/>*frame_buff,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*parlcd_mem_base)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parlcd_mem_base<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mzapo__parlcd_8c_1ab30b1b616caf5991cd8e1a6a52ba23e7" kindref="member">parlcd_write_cmd</ref>(parlcd_mem_base,<sp/>0x2c);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>frame_buff-&gt;<ref refid="structfb__data_1a2474a5474cbff19523a51eb1de01cda4" kindref="member">width</ref><sp/>*<sp/>frame_buff-&gt;<ref refid="structfb__data_1ad12fc34ce789bce6c8a05d8a17138534" kindref="member">height</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mzapo__parlcd_8c_1ab9125a7610ba0302c004802fb908590d" kindref="member">parlcd_write_data</ref>(parlcd_mem_base,<sp/>frame_buff-&gt;<ref refid="structfb__data_1a377cdea530281d6fa239a9e14c1a7286" kindref="member">fb</ref>[i]);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="update__peripherals_8c_1a27f1db817fb1375b46affe1dc4d0dc9b" kindref="member">led_strip_number</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*led_mem_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_nr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_nr<sp/>&lt;=<sp/>0<sp/>||<sp/>nr<sp/>&lt;<sp/>0<sp/>||<sp/>led_mem_base<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divisions<sp/>=<sp/>max_nr<sp/>*<sp/>2<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>output<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>32<sp/>/<sp/>(float)divisions;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>displayed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>indicates<sp/>if<sp/>it<sp/>is<sp/>just<sp/>space<sp/>or<sp/>if<sp/>the<sp/>led<sp/>can<sp/>light<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>current_limit<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>++i)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_limit<sp/>&lt;<sp/>i)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_limit<sp/>+=<sp/>width;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayed++;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active<sp/>&amp;&amp;<sp/>(displayed<sp/>&lt;=<sp/>nr))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>output<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>output<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)(led_mem_base<sp/>+<sp/><ref refid="mzapo__regs_8h_1aa421b3b6aad9fdc70be0f2f75ef0383e" kindref="member">SPILED_REG_LED_LINE_o</ref>)<sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="update__peripherals_8c_1af830207334d68a6414d80117e98e7a84" kindref="member">set_left_RGB</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*led_mem_base,<sp/>uint8_t<sp/>r,<sp/>uint8_t<sp/>g,<sp/>uint8_t<sp/>b)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(led_mem_base<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>color<sp/>=<sp/>(r<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(g<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>b;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)(led_mem_base<sp/>+<sp/><ref refid="mzapo__regs_8h_1a471398ab797101dfd7a1a2d96e9a518a" kindref="member">SPILED_REG_LED_RGB1_o</ref>)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="update__peripherals_8c_1a55ba16e218e56e6112bea4cb48dd7017" kindref="member">set_right_RGB</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*led_mem_base,<sp/>uint8_t<sp/>r,<sp/>uint8_t<sp/>g,<sp/>uint8_t<sp/>b)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(led_mem_base<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>color<sp/>=<sp/>(r<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(g<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>b;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)(led_mem_base<sp/>+<sp/><ref refid="mzapo__regs_8h_1a7b24a79dbfff0cab06021c259e967d6e" kindref="member">SPILED_REG_LED_RGB2_o</ref>)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="update__peripherals_8c_1afdba9f1f14e9a81789f87d33a36bda35" kindref="member">sel_leds_color</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*led_mem_base,<sp/>uint32_t<sp/>color)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(led_mem_base<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)(led_mem_base<sp/>+<sp/><ref refid="mzapo__regs_8h_1a471398ab797101dfd7a1a2d96e9a518a" kindref="member">SPILED_REG_LED_RGB1_o</ref>)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)(led_mem_base<sp/>+<sp/><ref refid="mzapo__regs_8h_1a7b24a79dbfff0cab06021c259e967d6e" kindref="member">SPILED_REG_LED_RGB2_o</ref>)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Petr/Documents/apo_semestralka/update_peripherals.c"/>
  </compounddef>
</doxygen>
