<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="text__fb_8c" kind="file" language="C++">
    <compoundname>text_fb.c</compoundname>
    <includes refid="text__fb_8h" local="yes">text_fb.h</includes>
    <includes refid="draw__shapes_8h" local="yes">draw_shapes.h</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>map_template.h</label>
        <link refid="map__template_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>font_types.h</label>
        <link refid="font__types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>draw_shapes.h</label>
        <link refid="draw__shapes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pthread.h</label>
      </node>
      <node id="1">
        <label>C:/Users/Petr/Documents/apo_semestralka/text_fb.c</label>
        <link refid="text__fb_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>text_fb.h</label>
        <link refid="text__fb_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>data_structures.h</label>
        <link refid="data__structures_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="text__fb_8c_1a21645f17c98617a8bd7342f9fdb78899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_char</definition>
        <argsstring>(fb_data *frame, char letter, int x, int y, int scale, font_descriptor_t *font, uint16_t color)</argsstring>
        <name>draw_char</name>
        <param>
          <type><ref refid="structfb__data" kindref="compound">fb_data</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>char</type>
          <declname>letter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref> *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>function to draw char, left upper edge is at x, y </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" line="16" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" bodystart="16" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="text__fb_8c_1ad3a4c863813fb8a6d93380bc7e1826ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int char_width</definition>
        <argsstring>(font_descriptor_t *fdes, int letter)</argsstring>
        <name>char_width</name>
        <param>
          <type><ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref> *</type>
          <declname>fdes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>letter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns width of character </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" line="38" column="5" bodyfile="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" bodystart="38" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="text__fb_8c_1a7873327914ec2b5b79833f8aa0ffd5ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t char_offset</definition>
        <argsstring>(font_descriptor_t *fdes, char letter)</argsstring>
        <name>char_offset</name>
        <param>
          <type><ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref> *</type>
          <declname>fdes</declname>
        </param>
        <param>
          <type>char</type>
          <declname>letter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns offset in font bitmap data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" line="53" column="10" bodyfile="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" bodystart="53" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="text__fb_8c_1a273e67041b3e82dbfdd989f64e876732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_text</definition>
        <argsstring>(fb_data *frame, char *text, int x, int y, int scale, font_descriptor_t *font, uint16_t color)</argsstring>
        <name>draw_text</name>
        <param>
          <type><ref refid="structfb__data" kindref="compound">fb_data</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref> *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>draws text to frame buffer, left upper edge is at x, y </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" line="67" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="text__fb_8c_1a6c9c3fce44e83e9b6076cdc74ba11464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_text_center</definition>
        <argsstring>(fb_data *frame, char *text, int x, int y, int scale, font_descriptor_t *font, uint16_t color)</argsstring>
        <name>draw_text_center</name>
        <param>
          <type><ref refid="structfb__data" kindref="compound">fb_data</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref> *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>draws text to frame buffer, centre of text is at x, y </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" line="76" column="6" bodyfile="C:/Users/Petr/Documents/apo_semestralka/text_fb.c" bodystart="76" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Program<sp/>to<sp/>draw<sp/>text<sp/>to<sp/>frame<sp/>buffer<sp/>on<sp/>MicroZed</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>based<sp/>MZ_APO<sp/>board<sp/>designed<sp/>by<sp/>Petr<sp/>Porazil<sp/>at<sp/>PiKRON</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>text_fb.c<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>simple<sp/>program<sp/>to<sp/>draw<sp/>text</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>(C)<sp/>Copyright<sp/>2021<sp/>by<sp/>Lukas<sp/>Nejezchleb</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>e-mail:<sp/><sp/><sp/>nejezluk@fel.cvut.cz</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>license:<sp/><sp/>any<sp/>combination<sp/>of<sp/>GPL,<sp/>LGPL,<sp/>MPL<sp/>or<sp/>BSD<sp/>licenses</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="text__fb_8h" kindref="compound">text_fb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="draw__shapes_8h" kindref="compound">draw_shapes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text__fb_8c_1a21645f17c98617a8bd7342f9fdb78899" kindref="member">draw_char</ref>(<ref refid="structfb__data" kindref="compound">fb_data</ref><sp/>*frame,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>letter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale,<sp/><ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref><sp/>*font,<sp/>uint16_t<sp/>color)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>letter_width<sp/>=<sp/><ref refid="text__fb_8c_1ad3a4c863813fb8a6d93380bc7e1826ff" kindref="member">char_width</ref>(font,<sp/>letter);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>letter_height<sp/>=<sp/>font-&gt;<ref refid="structfont__descriptor__t_1ab2e78c61905b4419fcc7b4cfc500fe85" kindref="member">height</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>offset<sp/>=<sp/><ref refid="text__fb_8c_1a7873327914ec2b5b79833f8aa0ffd5ac" kindref="member">char_offset</ref>(font,<sp/>letter);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>letter_height;<sp/>++row)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bits<sp/>=<sp/>*(font-&gt;<ref refid="structfont__descriptor__t_1a238010ff83cf2434a2f03dd87604c765" kindref="member">bits</ref><sp/>+<sp/>offset<sp/>+<sp/>row);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>letter_width;<sp/>++col)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>mask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(15<sp/>-<sp/>col);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>&amp;<sp/>mask)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rectx<sp/>=<sp/>x<sp/>+<sp/>col<sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rexty<sp/>=<sp/>y<sp/>+<sp/>row<sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="draw__shapes_8c_1a559a33154244f0ee1523958f44421c48" kindref="member">draw_rectangle</ref>(frame,<sp/>rectx,<sp/>rexty,<sp/>scale,<sp/>scale,<sp/>color);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="text__fb_8c_1ad3a4c863813fb8a6d93380bc7e1826ff" kindref="member">char_width</ref>(<ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref><sp/>*fdes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>letter)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((letter<sp/>&gt;=<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1adacf1efa49d5b0cbbc652414055846ab" kindref="member">firstchar</ref>)<sp/>&amp;&amp;<sp/>((letter<sp/>-<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1adacf1efa49d5b0cbbc652414055846ab" kindref="member">firstchar</ref>)<sp/>&lt;<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>))</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter<sp/>-=<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1adacf1efa49d5b0cbbc652414055846ab" kindref="member">firstchar</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fdes-&gt;<ref refid="structfont__descriptor__t_1aac3ead8529c84d32e1553c8ed4f7d3fb" kindref="member">width</ref>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1aac3ead8529c84d32e1553c8ed4f7d3fb" kindref="member">width</ref>[letter];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1a2f9abcdad559315008d44bd60a0fedbd" kindref="member">maxwidth</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">uint32_t<sp/><ref refid="text__fb_8c_1a7873327914ec2b5b79833f8aa0ffd5ac" kindref="member">char_offset</ref>(<ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref><sp/>*fdes,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>letter)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((letter<sp/>&gt;=<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1adacf1efa49d5b0cbbc652414055846ab" kindref="member">firstchar</ref>)<sp/>&amp;&amp;<sp/>((letter<sp/>-<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1adacf1efa49d5b0cbbc652414055846ab" kindref="member">firstchar</ref>)<sp/>&lt;<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>))</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//character<sp/>exists<sp/>in<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(letter<sp/>-<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1adacf1efa49d5b0cbbc652414055846ab" kindref="member">firstchar</ref>)<sp/>*<sp/>fdes-&gt;<ref refid="structfont__descriptor__t_1ab2e78c61905b4419fcc7b4cfc500fe85" kindref="member">height</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text__fb_8c_1a273e67041b3e82dbfdd989f64e876732" kindref="member">draw_text</ref>(<ref refid="structfb__data" kindref="compound">fb_data</ref><sp/>*frame,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale,<sp/><ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref><sp/>*font,<sp/>uint16_t<sp/>color)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>text[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>++i)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="text__fb_8c_1a21645f17c98617a8bd7342f9fdb78899" kindref="member">draw_char</ref>(frame,<sp/>text[i],<sp/>x,<sp/>y,<sp/>scale,<sp/>font,<sp/>color);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>+<sp/><ref refid="text__fb_8c_1ad3a4c863813fb8a6d93380bc7e1826ff" kindref="member">char_width</ref>(font,<sp/>text[i])<sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="text__fb_8c_1a6c9c3fce44e83e9b6076cdc74ba11464" kindref="member">draw_text_center</ref>(<ref refid="structfb__data" kindref="compound">fb_data</ref><sp/>*frame,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale,<sp/><ref refid="structfont__descriptor__t" kindref="compound">font_descriptor_t</ref><sp/>*font,<sp/>uint16_t<sp/>color)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>textlen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>textheight<sp/>=<sp/>font-&gt;<ref refid="structfont__descriptor__t_1ab2e78c61905b4419fcc7b4cfc500fe85" kindref="member">height</ref>*scale;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>text[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>++i)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textlen<sp/>+=<sp/><ref refid="text__fb_8c_1ad3a4c863813fb8a6d93380bc7e1826ff" kindref="member">char_width</ref>(font,<sp/>text[i])<sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>x=x-textlen/2;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>y=y-textheight/2;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>text[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>++i)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="text__fb_8c_1a21645f17c98617a8bd7342f9fdb78899" kindref="member">draw_char</ref>(frame,<sp/>text[i],<sp/>x,<sp/>y,<sp/>scale,<sp/>font,<sp/>color);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>+<sp/><ref refid="text__fb_8c_1ad3a4c863813fb8a6d93380bc7e1826ff" kindref="member">char_width</ref>(font,<sp/>text[i])<sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Petr/Documents/apo_semestralka/text_fb.c"/>
  </compounddef>
</doxygen>
