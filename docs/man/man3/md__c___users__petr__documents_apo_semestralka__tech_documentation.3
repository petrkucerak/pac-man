.TH "md__c___users__petr__documents_apo_semestralka__tech_documentation" 3 "Wed May 5 2021" "Version 1.0.0" "Pac-Man" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__c___users__petr__documents_apo_semestralka__tech_documentation \- Technická dokumentace 

.SH "Architektura aplikace"
.PP
Soubory programu jsou děleny dle funkčnosti\&. Podrobnjěí informace s popisem jednotlivých souborů, metod, funkcí, struktur, proměných a maker je možné dohledat v dokumentaci v sekci: \fCFiles\fP\&.
.PP
Aplikace je vytvořena pro MicroZed based MZ_APO board designed by Petr Porazil at \fCPiKRON\fP\&.
.PP
Aplikace vychází z šablony \fCmzapo_template\fP\&.
.SH "Blokové schéma algoritmu"
.PP
Blokové schéma popisuje fungování algoritmu hry Pac-Man\&.
.PP
.PP
Obecně si ho můžeme rozdělit do třech částí:
.PP
.IP "1." 4
konfigurace dané hry (Main menu)
.IP "2." 4
hra samotná (Game)
.IP "3." 4
výpis skóre a pauza (Dispaly score, Pause)
.PP
.SH "Popis kompilace a spuštění programu"
.PP
Pro kompliaci programu je připravený Makefile i s předpřipraveným připojením přes \fIProxyJump\fP do školní sítě a s možností se připojit rovnou na zařízení\&.
.PP
Makefile vychází z šablony \fCmzapo_template\fP\&.
.SS "Nastavení Makefilu"
Podrobné informace o způsobech připojení a detailního využití připraveného Makefilu je možné dohledat v dokumnetaci předmětu: https://cw.fel.cvut.cz/wiki/courses/b35apo/documentation/mz_apo-howto/start\&.
.SS "Flagy a podrobnosti kompilace"
Program je kompilován gcc kompilátorem s následujícími flagy\&.
.PP
.PP
.nf
CC = arm-linux-gnueabihf-gcc
CXX = arm-linux-gnueabihf-g++

CPPFLAGS = -I \&.
CFLAGS =-g -std=gnu99 -O1 -Wall
CXXFLAGS = -g -std=gnu++11 -O1 -Wall
LDFLAGS = -lrt -lpthread -pthread
.fi
.PP
.PP
Ke kompilaci na Ubuntu/Debina systému je třeba mít naistalovaný křížový kompilátor\&. 
.PP
.nf
sudo apt install crossbuild-essential-armhf

.fi
.PP
.SS "Zdrojové soubory"
Pokud budete upravovat nějaký ze souborů nebo přidávat vlastní, je třeba mít přidané všechny soubory ke kompilaci\&.
.PP
.PP
.nf
SOURCES = apoman\&.c mzapo_phys\&.c mzapo_parlcd\&.c update_peripherals\&.c text_fb\&.c map_from_template\&.c map_to_fb\&.c draw_shapes\&.c
SOURCES += terminal_read\&.c pacman\&.c ghost\&.c
SOURCES += font_prop14x16\&.c font_rom8x16\&.c
SOURCES += map_circles\&.c map_conch\&.c map_star\&.c
SOURCES += menu_utilities\&.c
SOURCES += final_score\&.c
SOURCES += game\&.c
.fi
.PP
.SS "Cílový binární soubor"
Název výsledného binárního souboru je definován tímto příkazem: 
.PP
.nf
TARGET_EXE = apoman

.fi
.PP
.SS "Propojení se zařízením při kompilaci"
Způsobů, jak pracovat se zařízením, je mnoho\&. My doporučujeme využít tzv\&. \fIProxyJumpu\fP, který jsme během vývoje používali\&. Pojďme si představit jednotlivé doporučené přístupy\&.
.PP
Rád bych upozornil, že tato část je rychlým srhnutí poskytnuté dokumentace dostupné na stránkách předmětu (https://cw.fel.cvut.cz/wiki/courses/b35apo/documentation/mz_apo-howto/start)\&.
.SS "1\&. Propojení pomocí <em>ProxyJump</em>"
Prvním způsobem je propojit se přes tzv\&. \fIProxyJump\fP\&. Je vhodné rovnou do Makefilu vyplnit cílovou IP adresu zařízení 
.PP
.nf
TARGET_IP ?= 192\&.168\&.202\&.xxx

.fi
.PP
 a vyplnit své uživatelské jméno s přístupem k ssh klíči (k školnímu serveru)\&. 
.PP
.nf
SSH_OPTIONS= -i ~/\&.ssh/mzapo-root-key -o 'ProxyJump=username@postel\&.felk\&.cvut\&.cz'

.fi
.PP
 Předejte tak zbytečnému zablokování ze strany školního serveru při opakovaném a častém připojování\&. Přístup pro vás bude snazší\&.
.SS "2\&. Využití SSH tunelu do lokální sítě laboratoře"
Další možností připojení je využít trvalé SSH spojení na server \fCpostel\&.felk\&.cvut\&.cz\fP\&. Tento způsob zaručí, že je menší riziko, aby naše připojení bylo vyhodnoceno ochranou serveru jako útok\&. Opětovaná připojování jsou tak tedy mnohem rychlejší\&.
.PP
Tunel vytvoříme příkazem 
.PP
.nf
ssh -nNT ctu_login@postel\&.felk\&.cvut\&.cz -L 2222:192\&.168\&.202\&.xxx:22

.fi
.PP
.PP
A v Makefilu je třeba povolit řádku s následujícími příkazy: 
.PP
.nf
TARGET_IP = 127\&.0\&.0\&.1
SSH_OPTIONS=-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o "Port=2222"
SSH_GDB_TUNNEL_REQUIRED=y

.fi
.PP
.SS "3\&. Připojení se přes PC v laboratoři"
Třetím možným způsobem je se připojit na školní PC, který je ve stejné síti jako používaný přípravek\&.
.PP
Zde stačí pouze zavolat příkaz, který nám kód zkompiluje a rovnou spustí na zařízení s danou IP adresou: 
.PP
.nf
make TARGET_IP=192\&.168\&.202\&.xx run

.fi
.PP
.SS "Důležité příkazy"
Další částí Makefilu jsou příkazy, které lze při práci s aplikací využít\&. Pojďme si představit ty nejvíce elementární\&.
.SS "Kompilace"
.PP
.nf
make
.fi
.PP
.SS "Vymazání objektových a zkompilovaných souborů"
.PP
.nf
make clean
.fi
.PP
.SS "Kompilace a zároveň spuštění dle konfigurace Makefilu"
.PP
.nf
make run
.fi
.PP
 
